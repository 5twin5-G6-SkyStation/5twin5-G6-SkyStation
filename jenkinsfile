pipeline {
    agent any

    stages {
        stage('Checkout from Git') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/widedgharbi-5twin5-G6']],
                    userRemoteConfigs: [[url: 'https://github.com/5twin5-G6-SkyStation/5twin5-G6-SkyStation.git']]
                ])
            }
             post {
        success {
           emailext body: "Succès du checkout Git", subject: "Succès - Étape Checkout", to: "gharbiwided10@gmail.com"
        }
        failure {
           emailext body: "Échec du checkout Git", subject: "Échec - Étape Checkout", to: "gharbiwided10@gmail.com"
        }
    }
        }

        stage('Clean and Build') {
            steps {
                sh "mvn clean package -DskipTests"
            }
            post {
        success {
            emailext body: "Succès du nettoyage et de la construction", subject: "Succès - Nettoyage et Construction", to: "gharbiwided10@gmail.com"
        }
        failure {
            emailext body: "Échec du nettoyage et de la construction", subject: "Échec - Nettoyage et Construction", to: "gharbiwided10@gmail.com"
        }
    }
        }

        stage('Code Quality Check via SonarQube') {
            steps {
                sh "mvn verify sonar:sonar -Dsonar.projectKey=station -Dsonar.projectName='station' -Dsonar.host.url=http://localhost:9000 -Dsonar.login=sqa_bae98f3aa8017ac0ef61144d56af86eaa10aa993"
            }
        }

        stage('Unit Tests') {
            steps {
                sh "mvn test"
            }
        }

         
        stage('Publish to Nexus') {
            steps {
                sh 'mvn deploy:deploy-file -DgroupId=tn.esprit.spring -DartifactId=gestion-station-ski -Dversion=1.0 -DgeneratePom=true -Dpackaging=jar -DrepositoryId=maven-releases -Durl=http://localhost:8081/repository/maven-releases/ -Dfile=target/gestion-station-ski-1.0.jar'
            }
        }

        stage('Building Image') {
            steps {
                script {
                    sh 'docker build -t widedgh/spring-app:widedgharbi-5twin5-G6 .'
                }
            }
        }

        stage('login dockerhub') {
            steps {
                sh 'docker login -u widedgh --password dckr_pat_R-IkFsccABvzTdTkyotJyPfcQD0'
            }
        }

        stage('Push Docker Image') {
            steps {
                sh 'docker push widedgh/spring-app:widedgharbi-5twin5-G6'
            }
        }

        stage('Run Spring && MySQL Containers') {
            steps {
                script {
                    sh 'docker compose up -d'
                }
            }
        }

    }

    
       post {
    always {
        cleanWs()
    }
    success {
            emailext subject: "Succées - La pipeline Jenkins" , body: "La pipeline Jenkins a été exécutée avec succès.", to: "gharbiwided10@gmail.com"
    }
    failure {
            emailext subject: "Échec - La pipeline Jenkins" , body: "Échec de la pipeline Jenkins",  to: "gharbiwided10@gmail.com"
        }
}

}
